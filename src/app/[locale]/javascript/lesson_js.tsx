import { LessonType } from "@/app/[locale]/lessons/lesson";
import * as Typo from "@/components/typography";

export const LESSONS_JS: LessonType[] = [
  {
    id: 1,
    label: "Sync / Async?",
    description: `2 kh√°i ni·ªám v·ªÅ th·ª© t·ª± x·ª≠ l√Ω c√°c statement.`,
    content: (
      <>
        <Typo.H4Typo>Sync ?</Typo.H4Typo>
        <Typo.ListTypo>
          <li className="marker:text-red-500">
            ƒê·ªìng b·ªô hay l√† tu·∫ßn t·ª± (l√† ƒë·ª©a n√†o vi·∫øt tr∆∞·ªõc th√¨ s·∫Ω ch·∫°y tr∆∞·ªõc, sau
            ch·∫°y sau )
          </li>
        </Typo.ListTypo>
        <Typo.H4Typo>ASync ?</Typo.H4Typo>
        <Typo.ListTypo>
          <li className="marker:text-red-500">
            B·∫•t ƒë·ªìng b·ªô (l√† cho d√π statement n√†y ƒë∆∞·ª£c vi·∫øt tr∆∞·ªõc nh∆∞ng n√≥ v·∫´n x·ª≠
            l√Ω sau, in sau c√°c t√°c v·ª• ƒë·ªìng b·ªô. V√¨ ta kh√¥ng bi·∫øt l√† t√°c v·ª• ƒë·ªìng
            b·ªô n√†y khi n√†o m·ªõi x·ª≠ l√Ω xong. )
          </li>
        </Typo.ListTypo>
        <Typo.PTypo>M·ªôt s·ªë statment async (b·∫•t ƒë·ªìng b·ªô) nh∆∞:</Typo.PTypo>
        <Typo.ListTypo>
          <li>fetch</li>
          <li>setTimeout</li>
          <li>setInterval</li>
          <li>Read File</li>
          <li>Set Cookies</li>
          <li>Request animation</li>
          <li>XML http request</li>
        </Typo.ListTypo>
      </>
    ),
  },
  {
    id: 2,
    label: "Callback v·ªõi c√°c thao t√°c async - b·∫•t ƒë·ªìng b·ªô ?",
    description:
      "G·ªçi l·∫°i ph·∫ßn x·ª≠ l√Ω sau khi c√°c thao t√°c b·∫•t ƒë·ªìng b·ªô ch·∫°y xong.(ƒë·∫£m b·∫£o ch·∫°y sau khi t√°c v·ª• async ho√†n t·∫•t).",
    content: (
      <>
        <Typo.H4Typo>M·ª•c ƒë√≠ch sinh ra: </Typo.H4Typo>
        <Typo.ListTypo>
          <li className="marker:text-red-500">
            Ta c·∫ßn x·ª≠ l√Ω m·ªôt thao t√°c, m·ªôt statement - bi·ªÉu th·ª©c n√†o ƒë√≥ sau khi
            m√† thao t√°c b·∫•t ƒë·ªìng b·ªô ch·∫°y xong hay ho√†n th√†nh
          </li>
          <li className="marker:text-red-500">
            V√≠ d·ª• nh∆∞ sau 1s ta s·∫Ω in ra 2.
            <Typo.BlockquoteTypo>
              <pre>
                {`  setTimeout(() => {
    console.log("2");
  }, 1000);
    console.log("1");
`}
              </pre>
            </Typo.BlockquoteTypo>
            <Typo.PTypo>
              {`  N·∫øu nh∆∞ block tr√™n th√¨ ta s·∫Ω in ra 1 v√† sau 1s s·∫Ω in ti·∫øp ra 2. V√¨
              vi·ªác in ra "1" kh√¥ng ph·∫£i thao t√°c b·∫•t ƒë·ªìng b·ªô n√™n n√≥ s·∫Ω ch·∫°y
              tr∆∞·ªõc. Sau ƒë√≥ h√†m setTimeout l√† h√†m b·∫•t ƒë·ªìng b·ªô n√™n s·∫Ω m·∫•t th·ªùi
              gian x·ª≠ l√Ω v√† ch·∫°y sau ƒë·ªÉ in ra "2"`}
            </Typo.PTypo>
          </li>
          <li className="marker:text-red-500">
            V√≠ d·ª• ƒë·ªÉ bi·∫øt r√µ t·∫°i sao c·∫ßn callback
            <Typo.BlockquoteTypo>
              <pre>
                {`  console.log("1");
  setTimeout(() => {
  }, 1000);
  console.log("2");
`}
              </pre>
            </Typo.BlockquoteTypo>
            <Typo.PTypo>
              {` Nh∆∞ block tr√™n s·∫Ω kh√¥ng ƒë·∫°t ƒë∆∞·ª£c y√™u c·∫ßu ta mong mu·ªën. V√¨ ta mong
              mu·ªën in ra "1" v√† sau ƒë√≥ 1s in ra 2. Tuy nhi√™n kh√¥ng ho·∫°t ƒë·ªông nh∆∞
              v·∫≠y, thao t√°c n√†o ƒë·ªìng b·ªô n√†o v·∫´n ƒëc ch·∫°y tr∆∞·ªõc, thao t√°c kh√¥ng
              ƒë·ªìng b·ªô s·∫Ω ch·∫°y sau, v√† ph·∫ßn x·ª≠ l√Ω sau khi h√†m b·∫•t ƒë·ªìng b·ªô ch·∫°y
              xong th√¨ ƒëang kh√¥ng c√≥ g√¨. Thao t√°c in ra 1 v√† 2 trong block n√†y
              l√† thao t√°c ƒë·ªìng b·ªô.`}
            </Typo.PTypo>
          </li>
        </Typo.ListTypo>
      </>
    ),
  },
  {
    id: 3,
    label: "Promise ?",
    description:
      "M·ª•c ƒë√≠ch sinh ra, li√™n quan g√¨ ƒë·∫øn ph·∫ßn x·ª≠ l√Ω thao t√°c b·∫•t ƒë·ªìng b·ªô b·∫±ng callBack.",
    content: (
      <>
        <Typo.H4Typo>V·∫•n ƒë·ªÅ g·∫∑p ph·∫£i, nguy√™n nh√¢n sinh ra: </Typo.H4Typo>
        <Typo.ListTypo>
          <li className="marker:text-red-500">
            Khi JavaScript ch·ªâ c√≥ callback ƒë·ªÉ x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô, n·∫øu c·∫ßn chu·ªói
            nhi·ªÅu thao t√°c async li√™n ti·∫øp, ta ph·∫£i l·ªìng callback trong
            callback, t·∫°o ra ‚Äúƒë·ªãa ng·ª•c callback‚Äù.
          </li>
          <li className="list-none">
            <Typo.PTypo>
              V√≠ d·ª• nh∆∞ vi·ªác api ti·∫øp theo c·∫ßn ƒëc l·∫•y t·ª´ data th·ª© nh·∫•t
            </Typo.PTypo>
            <Typo.BlockquoteTypo>
              <pre>
                {`getUser((user) => {
  getPosts(user.id, (posts) => {
    getComments(posts[0].id, (comments) => {
      console.log(comments);
    });
  });
});`}
              </pre>
            </Typo.BlockquoteTypo>
            <Typo.PTypo>
              M·ªôt ƒëi·ªÅu d·ªÖ nh·∫≠n th·∫•y t·ª´ v√≠ d·ª• tr√™n l√†:
              <Typo.ListTypo>
                <li>Code r·∫•t sau v√† r·ªëi</li>
                <li>Kh√≥ ƒë·ªçc, kh√≥ b·∫£o tr√¨</li>
                <li>
                  Kh√≥ x·ª≠ l√Ω l·ªói, v√¨ ta c·∫ßn try/catch ƒë·ªÉ b·∫Øt l·ªói n√™n l·∫°i t·ª´ng
                  t·∫ßng s·∫Ω g·ªçi th·ªß c√¥ng
                </li>
              </Typo.ListTypo>
              <br />
              <b>{`=> ƒê√¢y g·ªçi l√† callback hell ho·∫∑c ‚Äúpyramid of doom‚Äù`}.</b>
            </Typo.PTypo>
          </li>
          <li className="list-none">
            <Typo.PTypo>Demo chi ti·∫øt</Typo.PTypo>
            <Typo.BlockquoteTypo>
              <pre>
                {`function getUser(callback) {
  setTimeout(() => {
    console.log("‚úÖ L·∫•y user xong");
    callback({ id: 1, name: "B·∫Øc" });
  }, 1000);
}

function getPosts(userId, callback) {
  setTimeout(() => {
    console.log("‚úÖ L·∫•y b√†i vi·∫øt c·ªßa user", userId);
    callback([{ id: 101, title: "Post 1" }]);
  }, 1000);
}

function getComments(postId, callback) {
  setTimeout(() => {
    console.log("‚úÖ L·∫•y b√¨nh lu·∫≠n c·ªßa b√†i vi·∫øt", postId);
    callback(["Comment A", "Comment B"]);
  }, 1000);
}

// ‚ùå Callback hell
getUser((user) => {
  getPosts(user.id, (posts) => {
    getComments(posts[0].id, (comments) => {
      console.log("üìÑ B√¨nh lu·∫≠n:", comments);
    });
  });
});
`}
              </pre>
            </Typo.BlockquoteTypo>
          </li>
          <br />
        </Typo.ListTypo>

        <Typo.H4Typo>{`"Promise" ra ƒë·ªùi ƒë·ªÉ gi·∫£i quy·∫øt:`} </Typo.H4Typo>
        <Typo.PTypo>
          Promise cho ph√©p x√¢u chu·ªói t√°c v·ª• b·∫•t ƒë·ªìng b·ªô m·ªôt c√°ch tuy·∫øn t√≠nh v√†
          d·ªÖ ƒë·ªçc h∆°n. N√≥ l√† gi·∫£i ph√°p cho v·∫•n ƒë·ªÅ Callback hell gi√∫p vi·∫øt code
          async - b·∫•t ƒë·ªìng b·ªô r√µ r√†ng, x·ª≠ l√Ω l·ªói d·ªÖ h∆°n.
        </Typo.PTypo>
        <Typo.ListTypo>
          <li className="list-none">
            <Typo.PTypo>
              V√≠ d·ª• nh∆∞ vi·ªác api ti·∫øp theo c·∫ßn ƒëc l·∫•y t·ª´ data tr∆∞·ªõc
            </Typo.PTypo>
            <Typo.BlockquoteTypo>
              <pre>
                {`getUser()
  .then((user) => getPosts(user.id))
  .then((posts) => getComments(posts[0].id))
  .then((comments) => console.log(comments))
  .catch((err) => console.error(err));
`}
              </pre>
            </Typo.BlockquoteTypo>
            <Typo.PTypo>
              M·ªôt ƒëi·ªÅu d·ªÖ nh·∫≠n th·∫•y t·ª´ v√≠ d·ª• tr√™n l√†:
              <Typo.ListTypo>
                <li>Code ph·∫≥ng, kh√¥ng b·ªã l·ªìng nhau</li>
                <li>D·ªÖ ƒë·ªçc, d·ªÖ b·∫£o tr√¨,debug</li>
                <li>X·ª≠ l√Ω l·ªói t·∫≠p trung qua .catch()</li>
              </Typo.ListTypo>
              <br />
              <b>
                {" "}
                V·ªÅ sau, async/await ƒë∆∞·ª£c x√¢y tr√™n Promise, gi√∫p code b·∫•t ƒë·ªìng b·ªô
                nh√¨n g·∫ßn nh∆∞ ƒë·ªìng b·ªô.
              </b>
            </Typo.PTypo>
          </li>
          <li className="list-none">
            <Typo.PTypo>Demo chi ti·∫øt</Typo.PTypo>
            <Typo.BlockquoteTypo>
              <pre>
                {`function getUser() {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("‚úÖ L·∫•y user xong");
      resolve({ id: 1, name: "B·∫Øc" });
    }, 1000);
  });
}

function getPosts(userId) {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("‚úÖ L·∫•y b√†i vi·∫øt c·ªßa user", userId);
      resolve([{ id: 101, title: "Post 1" }]);
    }, 1000);
  });
}

function getComments(postId) {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("‚úÖ L·∫•y b√¨nh lu·∫≠n c·ªßa b√†i vi·∫øt", postId);
      resolve(["Comment A", "Comment B"]);
    }, 1000);
  });
}

// ‚úÖ Promise gi√∫p code ph·∫≥ng h∆°n
getUser()
  .then((user) => getPosts(user.id))
  .then((posts) => getComments(posts[0].id))
  .then((comments) => console.log("üìÑ B√¨nh lu·∫≠n:", comments))
  .catch((err) => console.error("‚ùå L·ªói:", err));
`}
              </pre>
            </Typo.BlockquoteTypo>
          </li>
        </Typo.ListTypo>
      </>
    ),
  },
];
